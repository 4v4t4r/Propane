#!/usr/local/bin/python
"""
This is 3ndG4me and Myntal's automated scoring code for the Propane game.

Right now this is literally a rip-off of NetKotH (you'll notice we've even kept a lot of the same comment verbiage for now)
NetKoTH was written by Irongeek, so nothing we plan to do would be possible without Irongeek, so praise be to Irongeek.

Currently PROPANE is very much a WIP. It will work the same as NetKotH at base level, but we plan
to give it a face lift, and add some new functionality.

We <3 NetKotH

Create a propane_config.ini in the same directory as the script
to look something like:
______________________________________________________________
[General]
outfile = default.htm
sleeptime = 6

[Servers To Check]
linux = http://127.0.0.1/a.htm
windows = http://127.0.0.1/b.htm
wildcard = http://127.0.0.1/c.htm
______________________________________________________________
Server names can be changed (no ":" or "=" characters please),
and the score file will be generated by the script. I'm just now
learning Python, so I'm sure there are better ways to do some
of the tasks I do in this script. You can also make a
template.htm file, and tags that match the server name in all
upper case will be replaced with the score information for that
box.

"""
import urllib2
import urllib
import re
import ConfigParser
import time
from distutils.dir_util import copy_tree
import os


# Colors for terminal output
class bcolors:
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    RED = '\033[31m'
    YELLOW = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    BGRED = '\033[41m'
    WHITE = '\033[37m'
    CYAN = '\033[36m'




#------Make some globals
config = ConfigParser.RawConfigParser()
scores = ConfigParser.RawConfigParser()
configfile =""
serverstocheck = ""
sleeptime = ""
outfile = ""
outdir = ""
gameSetup = True

def loadConfig():
        print bcolors.CYAN + bcolors.BOLD + "Loading Configurations" + bcolors.ENDC
        global configfile, serverstocheck, sleeptime, outfile, outdir
        configfile = config.read("propane_config.ini")
        serverstocheck = config.items("Servers To Check")
        sleeptime = config.getint("General", "sleeptime")
        outfile = config.get("General", "outfile")
        outdir = config.get("General", "outdir")

def score():
        scoresfile = scores.read("propane_scores.txt")
        for server in serverstocheck:
            try:
                print bcolors.GREEN + bcolors.BOLD + "Checking Server: " + bcolors.ENDC + bcolors.BOLD + server[0] + bcolors.ENDC + " @ " + bcolors.BOLD + server[1] + bcolors.ENDC
                url = urllib2.urlopen(server[1],None,10)
                #url = urllib2.urlopen(server[1])
                html = url.read()
                team = re.search('<team>(.*)</team>', html, re.IGNORECASE).group(1).strip().replace("=","").replace("<","").replace(">","")
                print bcolors.BOLD + "Server " + server[0] + bcolors.ENDC + " pwned by " + bcolors.RED + team + bcolors.ENDC
                serverscoressection = server[0]+"Scores"
                if not scores.has_option("TotalScores", team):
                    scores.set("TotalScores", team, 0)
                currentscore = scores.getint( "TotalScores",team)
                scores.set( "TotalScores", team, currentscore+1)
                if not scores.has_option(serverscoressection, team):
                    scores.set(serverscoressection, team, 0)
                currentscore = scores.getint( serverscoressection,team)
                scores.set( serverscoressection, team, currentscore+1)
            except IOError:
                print bcolors.FAIL + bcolors.BOLD + server[0] + bcolors.ENDC + " @ " + bcolors.FAIL + bcolors.BOLD + server[1] + bcolors.ENDC + " might be down, skipping it"
            except AttributeError:
                print bccolors.BLUE + bcolors.BOLD + server[0] + bcolors.ENDC + " might not be pwned yet"
        with open("propane_scores.txt", 'wb') as scoresfile:
                scores.write(scoresfile)

def initScoreFile():
        scoresfile = scores.read("propane_scores.txt")
        if not scores.has_section("TotalScores"):
                scores.add_section("TotalScores")

        for server in serverstocheck:
                serverscoressection = server[0]+"Scores"
                if not scores.has_section(serverscoressection):
                        scores.add_section(serverscoressection)

def reloadScoreBoard(server):
        print bcolors.BLUE + bcolors.BOLD + "Reloading Scoreboard for: " + bcolors.ENDC + bcolors.BOLD + server[0] + bcolors.ENDC
        try:
            serverscoressection = server[0]+"Scores"
            serverscores = scores.items(serverscoressection)
            tableresults = "<div class=\"table-responsive\" id=\"" + server[0] + "\">"
            tableresults = tableresults + "<table class=\"table\" border=\"2\">\n<tr>"
            tableresults = tableresults + "<td colspan=\"2\"><center><h3>" +(server[0]).title() + "</h3><br>"
            if((server[0]).title() != "Total"):
                    tableresults = tableresults + "<hr style=\"border-top: 1px solid #000;\"/><h4>Server: <a href=\"" + server[1] + "\">" + server[1]  +"</a></h4>"
            tableresults = tableresults + "</center></td></tr>\n"
            serverscores.sort(key=lambda score: -int(score[1]))
            toptagstart="<div class=\"topscore\">"
            toptagend="</div>"
            for team in serverscores:
                tableresults = tableresults + "<tr><td>" + toptagstart + team[0].title() + toptagend + "</td><td>" + toptagstart + str(team[1]) +  toptagend  + "</td></tr>\n"
                toptagstart="<div class=\"otherscore\">"
                toptagend="</div>"
            tableresults = tableresults + "</table></div>"
            return tableresults
        except:
            print bcolors.FAIL + bcolors.BOLD + "No section for " + server[0] + " (check your template for errors)" + bcolors.ENDC
#------Main begin
def main():

        global gameSetup

        while True:
                #------Check files that may have changed since las loop
                loadConfig() #-------Grab core config values, you have the option to edit config file as the game runs
                initScoreFile() #In case score setions for a bax are not there
                templatefilehandle = open("template/template.html", 'r')
                scorepagestring=templatefilehandle.read()
                #------Look at all the pages to see who owns them.
                score()



                if(gameSetup):
                        copy_tree("template", outdir)
                        os.remove(outdir + "template.html")
                        gameSetup = False

                #------Make Tables
                for server in serverstocheck:
                    thistable = reloadScoreBoard(server)
                    serverlabeltag=("<" + server[0] + ">").upper()
                    print bcolors.GREEN + bcolors.BOLD + "Updating " + bcolors.ENDC + bcolors.BOLD + serverlabeltag + bcolors.ENDC + " tag in the template"
                    scorepagestring = scorepagestring.replace(serverlabeltag,thistable)
                #------Make Total Table
                thistable = reloadScoreBoard(["Total",""])
                serverlabeltag=("<TOTAL>").upper()
                print bcolors.GREEN + bcolors.BOLD + "Updating " + bcolors.ENDC + bcolors.BOLD + serverlabeltag + bcolors.ENDC + " tag in the template"
                scorepagestring = scorepagestring.replace(serverlabeltag,thistable)
                #------Making the score page
                print bcolors.BLUE + bcolors.BOLD + "Updating Scoreboard " + bcolors.ENDC + bcolors.BOLD + outfile + bcolors.ENDC
                outfilehandle = open(outfile, 'w')
                outfilehandle.write(scorepagestring)
                outfilehandle.close()
                print bcolors.CYAN + bcolors.BOLD + "Next update in: " + bcolors.ENDC + str(sleeptime) + bcolors.BOLD + " second(s)" + bcolors.ENDC
                time.sleep(sleeptime)

if __name__ == "__main__":
    main()
